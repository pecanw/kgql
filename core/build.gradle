repositories {
//    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'

kotlin {
//    jvm()
//    js()
//    // This is for iPhone emulator
//    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
//    iosX64("ios") {
//        compilations.main.outputKinds("framework")
//    }
    sourceSets {
        commonMain {
            dependencies {
                implementation deps.kotlin.stdlib.common
                api deps.kotlin.serialization.common
            }
        }
        commonTest {
            dependencies {
                implementation deps.kotlin.test.common
                implementation deps.kotlin.test.commonAnnotations
            }
        }
        jvmMain {
            dependencies {
                implementation deps.kotlin.stdlib.jdk7
                api deps.kotlin.serialization.jvm
            }
        }
        jvmTest {
            dependencies {
                implementation deps.kotlin.test.jvm
                implementation deps.kotlin.test.junit
            }
        }
        jsMain {
            dependencies {
                implementation deps.kotlin.stdlib.js
                api deps.kotlin.serialization.js
            }
        }
        jsTest {
            dependencies {
                implementation deps.kotlin.test.js
            }
        }
        nativeMain {
            dependencies {
                api deps.kotlin.serialization.native
            }
        }
        nativeTest {
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        fromPreset(presets.iosArm64, 'iosArm64') {
            compilations.main.outputKinds('FRAMEWORK')
        }
        fromPreset(presets.iosX64, 'iosX64') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    configure([targets.iosX64, targets.iosArm64]) {
        compilations.main.source(sourceSets.nativeMain)
        compilations.test.source(sourceSets.nativeTest)
    }

}

println(project.plugins.toList())

configurations {
    compileClasspath
}
