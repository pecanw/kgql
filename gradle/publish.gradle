import java.nio.file.Files
import java.nio.file.Paths

// Configures publishing of Maven artifacts to Bintray
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply from: project.rootProject.file('gradle/pom.gradle')

// Load `local.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/secret.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/secret.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}


// Create empty jar for sources classifier to satisfy maven requirements
task stubSources(type: Jar) {
    classifier = 'sources'
}

// Create empty jar for javadoc classifier to satisfy maven requirements
task stubJavadoc(type: Jar) {
    classifier = 'javadoc'
}

task emptySourcesJar(type: Jar) {
    classifier = 'sources'
}

task javadocsJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

// Configure publishing
publishing {
    // TODO: I have no idea about this
    repositories {
        maven {
            url = "https://dl.bintray.com/${project.BINTRAY_ORG}/${project.BINTRAY_REPOSITORY}"
        }
        maven {
            name 'test'
            url "file://${rootProject.buildDir}/localMaven"
        }
    }

    // Process each publication we have in this project
    publications.all { publication ->
        artifact javadocsJar

        // apply changes to pom.xml files, see pom.gradle
        pom.withXml(configureMavenCentralMetadata)

        if (publication.name == 'kotlinMultiplatform') {
            // for our root metadata publication, set artifactId with a package and project name
            publication.artifactId = "$POM_ARTIFACT_ID"
            artifact emptySourcesJar
        } else {
            // for targets, set artifactId with a package, project name and target name (e.g. iosX64)
            publication.artifactId = "$POM_ARTIFACT_ID-${publication.name}"
        }
    }

//    afterEvaluate {
//        publications.getByName('kotlinMultiplatform') {
//            // Source jars are only created for platforms, not the common artifact.
//            artifact emptySourcesJar
//        }
//    }

//    // Patch publications with fake javadoc
//    kotlin.targets.all { target ->
//        def targetPublication = publications.findByName(target.name)
//        if (targetPublication != null) {
//            targetPublication.artifact stubJavadoc
//        }
//    }

    // Remove gradle metadata publishing from all targets which are not native
//    kotlin.targets.all { target ->
//        if (target.platformType.name != 'native') {
//            def publication = publishing.publications[targetName]
//            publication.gradleModuleMetadataFile = null
//            tasks.matching { it.name == "generateMetadataFileFor${name.capitalize()}Publication" }.all {
//                onlyIf { false }
//            }
//        }
//    }
}

bintray {
    user = project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : System.getenv('BINTRAY_API_KEY')
    publish = true
    override = true // for multi-platform Kotlin/Native publishing

    pkg {
        userOrg = project.BINTRAY_ORG
        repo = project.BINTRAY_REPOSITORY
        name = project.POM_ARTIFACT_ID
        licenses = ['Apache-2.0']
        vcsUrl = project.POM_SCM_URL
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }
}

// TODO :kludge this is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal

// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('-test') }.collect {
        println("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        it
    }
}
