// TODO tie this into the normal gradle-mvn-push script
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

dokka {
    impliedPlatforms = ["Common"]
    kotlinTasks {
        []
    }
    sourceRoot {
        path = kotlin.sourceSets.commonMain.srcDirs[0]
        platforms = ["Common"]
    }
    if (kotlin.sourceSets.getNames().contains("jvmMain")) {
        sourceRoot {
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
            platforms = ["JVM"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("jsMain")) {
        sourceRoot {
            path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
            platforms = ["js"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("nativeMain")) {
        sourceRoot {
            path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
            platforms = ["native"]
        }
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            "https://api.bintray.com/maven/yshrsmz/kgql/kgql"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            "https://oss.jfrog.org/artifactory/oss-snapshot-local"
}

def getRepositoryUsername() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
}

def getRepositoryPassword() {
    return hasProperty('BINTRAY_API_KEY') ? BINTRAY_API_KEY : ""
}

task emptySourcesJar(type: Jar) {
    classifier = 'sources'
}
task emptyJavadocJar(type: Jar) {
    classifier = 'javadoc'
}

publishing {
    publications.all {
        artifact emptyJavadocJar

        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    afterEvaluate {
        publications.getByName('kotlinMultiplatform') {
            // Source jars are only created for platforms, not the common artifact.
            artifact emptySourcesJar
        }
    }

    repositories {
        maven {
            url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
        maven {
            name 'test'
            url "file://${rootProject.buildDir}/localMaven"
        }
    }
}
